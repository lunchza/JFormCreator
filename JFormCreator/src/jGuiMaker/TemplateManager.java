/**
 * @author Peter Pretorius
 * 
 * This program handles saving and loading of template files (.tmp) that house component
 * information. Loaded templates are fully functional and can be altered in any way.
 */

package jGuiMaker;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Scanner;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

public class TemplateManager {
	ArrayList<Component> components;
	JFileChooser fileChooser;
	int width, height;

	/*
	 * Creates a TemplateManager for loading templates
	 */
	public TemplateManager() {

	}

	/*Creates a TemplateManager for saving templates. Takes as input the component list
	 */
	public TemplateManager(ArrayList<Component> components) {
		this.components = components;
		fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Choose target file location");
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fileChooser.setAcceptAllFileFilterUsed(false);
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
				"template files(.tmp)", "tmp");

		fileChooser.setFileFilter(filter);
	}

	/*
	 * Creates a template file, using the component list specified by the constructor
	 */
	public boolean createTemplate() {
		File f = null;
		if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION)
			f = fileChooser.getSelectedFile();

		PrintWriter writer = null;

		if (f != null) {
			if (!f.getName().contains(".tmp"))
				f = new File(f.getAbsolutePath().concat(".tmp"));
			int result;
			if (f.exists()) {
				result = JOptionPane.showConfirmDialog(null,
						"Target file exists. Overwrite?" , "Warning", JOptionPane.YES_NO_OPTION);
			}

			else
				result = 0;

			if (result == 0) {

				try {
					writer = new PrintWriter(f);
				} catch (FileNotFoundException e) {
					JOptionPane.showMessageDialog(null, "Error (code 5)!");
				} catch (NullPointerException e) {
					JOptionPane.showMessageDialog(null, "Error (code 6)");

				}

				writer.println("//generated by JFormCreator v"
						+ JFormCreator.getVersion());
				writer.println("//JFormCreator written by Peter Pretorius");
				Dimension size = JFormCreator.getFrameSize();
				//Frame size is variable, so needs to be recorded in the template file
				writer.println(size.width + " " + size.height);
				for (Component comp : components) {
					writer.println(getComponentType(comp));
					writer.print(comp.getX() + " ");
					writer.print(comp.getY() + " ");
					writer.print(comp.getWidth() + " ");
					writer.println(comp.getHeight() + " ");

					if (comp instanceof JButton) {
						writer.println(((JButton) (comp)).getText());
					}

					else if (comp instanceof JLabel) {
						writer.println(((JLabel) (comp)).getText());
					}

					else if (comp instanceof JCheckBox) {
						writer.println(((JCheckBox) (comp)).getText());
					}

					else if (comp instanceof JComboBox) {
						String[] items = new String[((JComboBox) (comp))
								.getItemCount()];

						for (int i = 0; i < items.length; i++)
							items[i] = (String) ((JComboBox) comp).getItemAt(i);

						for (int j = 0; j < items.length; j++) {
							writer.print(items[j]);
							if (items.length - j != 1)
								writer.print(",");
						}
						writer.println();
					}
				}
				writer.close();

				return true;
			}
		}
		return false;
	}

	/*
	 * Loads a template from the specified template file.
	 */
	public ArrayList<Component> loadTemplate(File f) {
		ArrayList<Component> components = new ArrayList<Component>();
		Scanner scanner = null;

		try {
			scanner = new Scanner(f);
		} catch (FileNotFoundException e) {
			JOptionPane.showMessageDialog(null, "Error (code 5)!");
		}

		if (scanner != null) {
			//Version checking is done first. If versions are incompatible, the program will still attempt
			//to load the template
			String version = "";
			String firstLine = scanner.nextLine();
			version = firstLine.substring(firstLine.lastIndexOf("v")+1,
					firstLine.length());
			int result = 0;
			if (!version.equals(JFormCreator.getVersion()))
				result = JOptionPane
						.showConfirmDialog(
								null,
								"Template file was generated with a different version of JFormCreator. Attempt to load anyway?" , "Warning", JOptionPane.YES_NO_OPTION);

			if (result == 0) {
				try {
					//Read in component parameters until the end of the file. They are put into an ArrayList
					//and passed to the main program, where they are loaded into the frame
					scanner.nextLine();
					width = scanner.nextInt();
					height = scanner.nextInt();
					scanner.nextLine();
					while (scanner.hasNext()) {
						Component comp = createComponent(scanner.nextLine());
						comp.setBounds(scanner.nextInt(), scanner.nextInt(),
								scanner.nextInt(), scanner.nextInt());

						scanner.nextLine();

						if (comp instanceof JButton) {
							((JButton) (comp)).setText(scanner.nextLine());
						}

						else if (comp instanceof JLabel) {
							((JLabel) (comp)).setText(scanner.nextLine());
						}

						else if (comp instanceof JTextArea) {
							((JTextArea) (comp)).setBorder(BorderFactory
									.createLineBorder(Color.BLACK));
						}

						else if (comp instanceof JCheckBox) {
							((JCheckBox) (comp)).setText(scanner.nextLine());
						}

						else if (comp instanceof JComboBox) {
							String input = scanner.nextLine();
							String[] items = input.split(",");

							for (int i = 0; i < items.length; i++)
								((JComboBox) (comp)).addItem(items[i]);
						}

						components.add(comp);
					}
				} catch (InputMismatchException e) {
					JOptionPane.showMessageDialog(null,
							"An error occured, unable to load template");
				}
			}
		}

		return components;
	}

	public Dimension getSize() {
		return new Dimension(width, height);
	}

	/*
	 * Returns the name (As a String) of a Swing component
	 */
	public String getComponentType(Component comp) {
		if (comp instanceof JButton)
			return "JButton";

		if (comp instanceof JLabel)
			return "JLabel";

		if (comp instanceof JTextField)
			return "JTextField";

		if (comp instanceof JTextArea)
			return "JTextArea";

		if (comp instanceof JCheckBox)
			return "JCheckBox";

		if (comp instanceof JComboBox)
			return "JComboBox";

		return "UNKNOWN COMPONENT";
	}

	/*
	 * After the component name is read from the template file, this method creates an instance of that
	 * component based on the name. The parameters for this component come from the template file
	 */
	public Component createComponent(String type) {
		if (type.equals("JButton"))
			return new JButton();

		if (type.equals("JLabel"))
			return new JLabel();

		if (type.equals("JTextField"))
			return new JTextField();

		if (type.equals("JTextArea"))
			return new JTextArea();

		if (type.equals("JCheckBox"))
			return new JCheckBox();

		if (type.equals("JComboBox"))
			return new JComboBox();

		return null;
	}

}
