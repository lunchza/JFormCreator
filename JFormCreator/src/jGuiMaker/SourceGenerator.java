/**
 * @author Peter Pretorius
 * 
 * This program generates a target java source file that creates an interface based
 * on an ArrayList of Components. The source file is immediately compilable and executable.
 * The code is commented to a small degree
 */

package jGuiMaker;

import java.awt.Component;
import java.awt.Dimension;
import java.util.ArrayList;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JTextArea;

public class SourceGenerator {
	ArrayList<Component> components;
	String[] componentNames;
	JFileChooser fileChooser;
	File f;
	
	//These variables assist with component naming. Since it's undesirable to ask the user for the name
	//of every component, they are simply called Button1, Label2 etc and can be easily renamed using a
	//search-and-replace
	int numButtons = 1;
	int numLabels = 1;
	int numFields = 1;
	int numAreas = 1;
	int numCheckBoxes = 1;
	int numComboBoxes = 1;
	
	//Determines whether or not ActionListener code will be present in the generated code
	boolean generateEventCode;

	int index = 0;

	/*
	 * Constructs a new SourceGenerator from the ArrayList components.
	 */
	public SourceGenerator(ArrayList<Component> components, boolean generateEventCode) {
		this.components = components;
		this.generateEventCode = generateEventCode;
		componentNames = new String[components.size()];
		fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Choose target file location");
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fileChooser.setAcceptAllFileFilterUsed(false);
		FileNameExtensionFilter filter = new FileNameExtensionFilter(
				"java files(.java)", "java");

		fileChooser.setFileFilter(filter);
	}

	/*
	 * Since the component names appear in the source more than once (Declaration, Initialisation and possibly
	 * once more for adding ActionListener) the indices need to be reset for each reference instance.
	 */
	public void resetIndices() {
		numButtons = numLabels = numFields = numAreas = numCheckBoxes = numComboBoxes = 1;
	}

	//Generate .java source file
	public void generate() {
		PrintWriter writer = null;
		if (fileChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION)
			f = fileChooser.getSelectedFile();
		if (f != null) {
			int result = -1;
			if (f.exists()) {
				result = JOptionPane.showConfirmDialog(null,
						"Target file exists. Overwrite?", "Warning", JOptionPane.YES_NO_OPTION);
			}
			
			else result = 0;

			if (result == 0) {

				if (!f.getName().contains(".java"))
					f = new File(f.getAbsolutePath().concat(".java"));
				
				/*String name = f.getName();
				
				if (!Character.isUpperCase(name.charAt(0)))
				{
					String correctedName = Character.toUpperCase(name.charAt(0)) + name.substring(1);
				}*/

				try {
					writer = new PrintWriter(f);
				} catch (FileNotFoundException e) {
					JOptionPane.showMessageDialog(null, "Error (code 5)!");
				} catch (NullPointerException e) {
					JOptionPane.showMessageDialog(null, "Error (code 6)");

				}

				String programName = f.getName().substring(0,
						f.getName().lastIndexOf("."));

				writer.println("//Generated by JFormCreator v" + JFormCreator.getVersion());
				writer.println("//JFormCreator written by Peter Pretorius");
				writer.println();
				writer.println("import javax.swing.*;");
				writer.println("import java.awt.*;");
				
				if(generateEventCode)
					writer.println("import java.awt.event.*;");
				
				writer.println();
				writer.print("public class " + programName
						+ " extends JFrame ");
				if (generateEventCode)
					writer.println("implements ActionListener");
				else
					writer.println();
				writer.println("{");
				writer.println("\t//gui declarations");
				for (Component comp : components) // initial declarations
				{
					String componentName = getComponentName(comp);
					String componentType = getComponentType(comp);

					writer.println("\t" + componentType + " " + componentName
							+ ";");
				}
				resetIndices();
				writer.println();
				writer.println("\tpublic " + programName + "()");
				writer.println("\t{");
				writer.println("\tsuper(\"" + programName + "\");");
				writer.println("\t//gui initialisations");
				for (Component comp : components) // initialisations
				{
					String componentName = getComponentName(comp);
					String componentType = getComponentType(comp);

					if (componentType.equals("JButton")) {
						JButton tempButton = (JButton) comp;
						writer.println("\t" + componentName + " = " + "new "
								+ componentType + "(\"" + tempButton.getText()
								+ "\");");
					}

					else if (componentType.equals("JLabel")) {
						JLabel tempLabel = (JLabel) comp;
						writer.println("\t" + componentName + " = " + "new "
								+ componentType + "(\"" + tempLabel.getText()
								+ "\");");
						
					} else if (componentType.equals("JCheckBox")) {
						JCheckBox tempCheckBox = (JCheckBox) comp;
						writer.println("\t" + componentName + " = " + "new "
								+ componentType + "(\""
								+ tempCheckBox.getText() + "\");");
						
					} else if (componentType.equals("JComboBox")) {
						JComboBox tempComboBox = (JComboBox) comp;
						String[] items = new String[tempComboBox.getItemCount()];
						
						for (int i = 0; i < items.length; i++)
							items[i] = (String) tempComboBox.getItemAt(i);
						
						writer.print("\tString[] comboBox" + (numComboBoxes-1)+ "Items = {");
						
						for (int i = 0; i < items.length; i++)
						{
							writer.print("\"" + items[i] + "\"");
							if (items.length - i != 1)
								writer.print(",");
						}
						writer.println("};");
						
						writer.println("\t" + componentName + " = " + "new "
								+ componentType + "(comboBox" + (numComboBoxes-1) +"Items);");

					} else
						writer.println("\t" + componentName + " = " + "new "
								+ componentType + "();");
				}
								
				resetIndices();
				writer.println();
				writer.println("\t//gui component properties");
				for (Component comp : components) // properties
				{
					String componentName = getComponentName(comp);

					writer.println("\t" + componentName + ".setBounds("
							+ comp.getX() + ", " + comp.getY() + ", "
							+ comp.getWidth() + ", " + comp.getHeight() + ");");
					
					if (comp instanceof JTextArea)
					 writer.println("\t" + componentName + ".setBorder(BorderFactory.createLineBorder(Color.BLACK));");
				}

				writer.println();
				Dimension size = JFormCreator.getFrameSize();
				writer.println("\tsetSize(" + size.width + "," + (size.height+30) + ");");
				writer.println("\tsetLocationRelativeTo(null);");
				writer.println("\tsetDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
				writer.println("\tsetResizable(false);");
				writer.println("\tsetLayout(null);");
				writer.println();
				resetIndices();
				writer.println("\t//adding gui components to the frame");
				for (Component comp : components) // properties
				{
					String componentName = getComponentName(comp);

					writer.println("\tadd(" + componentName + ");");
					if (generateEventCode)
					{
						if (comp.getName() != null)
							writer.println("\t" + componentName + ".addActionListener(this);");
					}
				}

				writer.println("\tsetVisible(true);");
				writer.println("\trequestFocus();");
				writer.println("\t}");
				writer.println();
				writer.println("\tpublic static void main(String[] a)");
				writer.println("\t{");
				writer.println("\tnew " + programName + "();");
				writer.println("\t}");
				writer.println();
				if (generateEventCode)
				{
					writer.println("\tpublic void actionPerformed(ActionEvent evt)");
					writer.println("\t{");
					resetIndices();
					for (Component comp: components)
					{
						String componentName = getComponentName(comp);
						
						if (comp.getName() != null)
						{
							writer.println("\t\tif (evt.getSource() == " + componentName+")");
							writer.println("\t\t{");
							writer.println();
							writer.println("\t\t}");
						}
					}
					writer.println("\t}");
				}
				writer.println("}");

				writer.close();
				JOptionPane.showMessageDialog(null, "File saved as " + programName + ".java");
			}
		}
	}

	/*
	 * Dynamically determines component names. They are named Button1, Label2 etc
	 */
	public String getComponentName(Component comp) {
		if (comp instanceof JButton)
			return "button" + numButtons++;

		if (comp instanceof JLabel)
			return "label" + numLabels++;

		if (comp instanceof JTextField)
			return "textField" + numFields++;
		
		if (comp instanceof JTextArea)
			return "textArea" + numAreas++;
		
		if (comp instanceof JCheckBox)
			return "checkBox" + numCheckBoxes++;
		
		if (comp instanceof JComboBox)
			return "comboBox" + numComboBoxes++;

		return "UNNAMED COMPONENT";
	}

	//method copied from the Template Manager
	public String getComponentType(Component comp) {
		if (comp instanceof JButton)
			return "JButton";

		if (comp instanceof JLabel)
			return "JLabel";

		if (comp instanceof JTextField)
			return "JTextField";
		
		if (comp instanceof JTextArea)
			return "JTextArea";
		
		if (comp instanceof JCheckBox)
			return "JCheckBox";
		
		if (comp instanceof JComboBox)
			return "JComboBox";

		return "UNKNOWN COMPONENT";
	}

}
